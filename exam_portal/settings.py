"""
Django settings for exam_portal project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os

env = environ.Env(
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read environment variables
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Provide a default only for Docker build (collectstatic), will be overridden in production
SECRET_KEY = env('SECRET_KEY', default='django-insecure-build-only-key-DO-NOT-USE-IN-PRODUCTION')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

# In production, ALLOWED_HOSTS must be explicitly set via environment variable
# In development, allow all hosts for convenience
if DEBUG:
    ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1', 'testserver', '192.168.29.81', '192.168.29.214', '*'])
else:
    # Provide default for Docker build, will be overridden by environment variable at runtime
    ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost'])

# Feature Flags Configuration
# Control feature availability via environment variables
FEATURES = {
    'PDF_EXTRACTOR_ENABLED': env.bool('PDF_EXTRACTOR_ENABLED', default=True),
    'PDF_UPLOAD_ALLOWED': env.bool('PDF_UPLOAD_ALLOWED', default=True),
    'AI_GRADING_ENABLED': env.bool('AI_GRADING_ENABLED', default=False),
    'ADVANCED_ANALYTICS_ENABLED': env.bool('ADVANCED_ANALYTICS_ENABLED', default=True),
    'PAYMENT_SYSTEM_ENABLED': env.bool('PAYMENT_SYSTEM_ENABLED', default=True),
    'PROCTORING_ENABLED': env.bool('PROCTORING_ENABLED', default=False),
    'BULK_OPERATIONS_ENABLED': env.bool('BULK_OPERATIONS_ENABLED', default=True),
    'EXAM_TEMPLATES_ENABLED': env.bool('EXAM_TEMPLATES_ENABLED', default=True),
    'COLLABORATIVE_EDITING': env.bool('COLLABORATIVE_EDITING', default=False),
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'crispy_forms',
    'crispy_tailwind',
    'django_htmx',
    'compressor',
    'django_extensions',
    'csp',
    
    # Local apps
    'users',
    'core',
    'exams',
    'questions',
    'analytics',
    'knowledge',
]

# Conditionally add feature-dependent apps
if FEATURES['PDF_EXTRACTOR_ENABLED']:
    INSTALLED_APPS.append('pdf_extractor')

if FEATURES['PAYMENT_SYSTEM_ENABLED']:
    INSTALLED_APPS.append('payments')

# Temporarily disable debug toolbar to fix JS conflicts
# if DEBUG:
#     INSTALLED_APPS += ['debug_toolbar']
if DEBUG:
    pass  # Debug toolbar disabled
else:
    INSTALLED_APPS += ['django_ratelimit']

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    'core.security.SecurityMiddleware',
]

# Temporarily disable debug toolbar middleware
# if DEBUG:
#     MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']

# Add CSP middleware for production only
if not DEBUG:
    MIDDLEWARE.append('csp.middleware.CSPMiddleware')

ROOT_URLCONF = 'exam_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'core.context_processors.feature_flags',  # Feature flags context processor
            ],
        },
    },
]

WSGI_APPLICATION = 'exam_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': env.db(default='sqlite:///db.sqlite3')
}

# Cache Configuration
if DEBUG:
    # Use dummy cache for development (rate limiting disabled)
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }
else:
    # Use Redis for production
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': env('REDIS_URL', default='redis://localhost:6379/0'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }

# Session Configuration (using database for development)
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 3600  # 1 hour


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Django Compressor settings
COMPRESS_ENABLED = not DEBUG
COMPRESS_CSS_FILTERS = ['compressor.filters.css_default.CssAbsoluteFilter', 'compressor.filters.cssmin.CSSMinFilter']
COMPRESS_JS_FILTERS = ['compressor.filters.jsmin.JSMinFilter']

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'users.User'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'users.backends.EmailOrUsernameBackend',  # Custom backend for email or username login
    'django.contrib.auth.backends.ModelBackend',  # Keep default as fallback
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://192.168.29.81:8000",
    "http://192.168.29.81:3000",
    "http://192.168.29.81:5000",
    "http://localhost:5000",
    "http://127.0.0.1:5000",
]

# Allow all hosts in same subnet for development
CORS_ALLOW_ALL_ORIGINS = DEBUG

# Allow credentials to be included in CORS requests
CORS_ALLOW_CREDENTIALS = True

# Allow all headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# JWT settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# Email Configuration - Handle empty environment variables gracefully
EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = env('EMAIL_HOST', default='smtp.gmail.com')
# Handle EMAIL_PORT: if empty string, use default 587
_email_port = env('EMAIL_PORT', default='587')
EMAIL_PORT = int(_email_port) if _email_port else 587
# Handle EMAIL_USE_TLS: if empty string, use default True
_email_tls = env('EMAIL_USE_TLS', default='True')
EMAIL_USE_TLS = _email_tls.lower() in ('true', '1', 'yes') if _email_tls else True
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='noreply@examportal.com')

# Security Settings
SECURE_SSL_REDIRECT = env('SECURE_SSL_REDIRECT', default=not DEBUG)
SESSION_COOKIE_SECURE = env('SESSION_COOKIE_SECURE', default=not DEBUG)
CSRF_COOKIE_SECURE = env('CSRF_COOKIE_SECURE', default=not DEBUG)
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = env('SECURE_HSTS_SECONDS', default=31536000 if not DEBUG else 0)
SECURE_HSTS_INCLUDE_SUBDOMAINS = env('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=not DEBUG)
SECURE_HSTS_PRELOAD = env('SECURE_HSTS_PRELOAD', default=not DEBUG)

# Celery Configuration
CELERY_BROKER_URL = env('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Conditional Celery Task Routing (based on feature flags)
if FEATURES['PDF_EXTRACTOR_ENABLED']:
    CELERY_TASK_ROUTES = {
        'pdf_extractor.tasks.*': {'queue': 'heavy'},
        'pdf_extractor.celery.*': {'queue': 'heavy'},
    }

# Debug Toolbar
INTERNAL_IPS = ['127.0.0.1', '192.168.29.81', '192.168.29.214', '192.168.29.1']

# Allow debug toolbar for entire local network in development
if DEBUG:
    import socket
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS += [ip[:-1] + '1' for ip in ips]  # Add gateway IPs

# Debug Toolbar Configuration - Fix Math Modal Conflicts and Deprecation Warnings
DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG and not request.path.startswith('/static/'),
    'INTERCEPT_REDIRECTS': False,
    'SHOW_TEMPLATE_CONTEXT': True,
    'ENABLE_STACKTRACES': True,
    # Fix z-index conflicts with math modal
    'ROOT_TAG_EXTRA_ATTRS': 'style="z-index: 1000 !important;"',
    # Prevent interference with MathJax
    'SKIP_TEMPLATE_PREFIXES': ['mathml/', 'mathjax/'],
    # Disable problematic panels that might interfere with modals
    'DISABLE_PANELS': {
        'debug_toolbar.panels.redirects.RedirectsPanel',
    },
    # Reduce JavaScript conflicts and deprecation warnings
    'INSERT_BEFORE': '</body>',
    'RENDER_PANELS': False,  # Reduces DOM manipulation
    'RESULTS_CACHE_SIZE': 10,  # Reduce memory usage
}

# Custom Debug Toolbar Panels - Remove panels that conflict with math functionality
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.history.HistoryPanel',
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    # Removed: AlertsPanel (can interfere with modal alerts)
    # Removed: RedirectsPanel (configured to be disabled above)
]

# Content Security Policy (disabled in development)
# Correct django-csp configuration format
if not DEBUG:
    CSP_DEFAULT_SRC = ("'self'",)
    CSP_SCRIPT_SRC = (
        "'self'",
        "'unsafe-inline'",  # Required for inline scripts
        "https://cdn.jsdelivr.net",  # CDN for libraries
        "https://unpkg.com",  # Alpine.js CDN
        "https://cdnjs.cloudflare.com",  # Cloudflare CDN
        "https://cdn.tailwindcss.com",  # Tailwind CSS CDN
    )
    CSP_STYLE_SRC = (
        "'self'",
        "'unsafe-inline'",  # Required for Tailwind CSS
        "https://cdn.jsdelivr.net",
        "https://fonts.googleapis.com",
    )
    CSP_IMG_SRC = ("'self'", "data:", "https:")
    CSP_FONT_SRC = ("'self'", "https://fonts.gstatic.com", "data:")
    CSP_CONNECT_SRC = ("'self'",)
    CSP_FORM_ACTION = ("'self'",)
    CSP_BASE_URI = ("'self'",)
    CSP_FRAME_ANCESTORS = ("'none'",)

# Rate Limiting Configuration
RATELIMIT_ENABLE = not DEBUG  # Disable rate limiting in development
RATELIMIT_USE_CACHE = 'default'

# API Rate Limits (requests per minute)
API_RATE_LIMIT = '60/m'  # 60 requests per minute
LOGIN_RATE_LIMIT = '5/m'  # 5 login attempts per minute
TEST_SUBMISSION_RATE_LIMIT = '10/m'  # 10 test submissions per minute

# Authentication URLs
LOGIN_URL = '/users/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Additional Security Settings
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'  # Changed for network access
CSRF_COOKIE_SAMESITE = 'Lax'  # Changed for network access

# CSRF trusted origins for network access
CSRF_TRUSTED_ORIGINS = [
    'http://192.168.29.81:5000',
    'http://192.168.29.81:8000',
    'http://192.168.29.214:5000',
    'http://192.168.29.214:8000',
    'http://localhost:5000',
    'http://127.0.0.1:5000',
]

# File Upload Security
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'errors.log'),
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': env('DJANGO_LOG_LEVEL', default='INFO'),
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['error_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING' if DEBUG else 'INFO',
    },
}
