#!/usr/bin/env python
"""
Create a Django data migration from exported fixtures.
This script generates a migration file that will import data when you run 'python manage.py migrate'
"""

import os
import sys
import json
from datetime import datetime

def create_data_migration(backup_dir, app_name='users'):
    """Create a data migration file from backup fixtures"""

    # Read all JSON files
    fixtures = {}
    json_files = [
        'users.json',
        'exams.json',
        'questions.json',
        'knowledge.json',
        'payments.json',
        'analytics.json'
    ]

    for filename in json_files:
        filepath = os.path.join(backup_dir, filename)
        if os.path.exists(filepath):
            try:
                with open(filepath, 'r') as f:
                    data = json.load(f)
                    if data:  # Only include non-empty files
                        fixtures[filename] = data
                        print(f"✓ Loaded {filename}: {len(data)} records")
            except json.JSONDecodeError:
                print(f"⚠ Skipping {filename}: Invalid JSON")
        else:
            print(f"⚠ File not found: {filepath}")

    if not fixtures:
        print("❌ No valid fixtures found!")
        return

    # Generate migration content
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    migration_number = "0007"  # Adjust based on your last migration number

    migration_content = f'''# Generated by create_data_migration.py on {datetime.now()}

from django.db import migrations
from django.core.management import call_command
import os

def load_fixture_data(apps, schema_editor):
    """Load data from fixtures in correct order"""
    fixture_dir = os.path.join(os.path.dirname(__file__), '..', '..', 'fixtures')

    # Order matters - respects foreign key dependencies
    fixture_order = [
        'users.json',
        'exams.json',
        'questions.json',
        'knowledge.json',
        'payments.json',
        'analytics.json',
    ]

    for fixture_file in fixture_order:
        fixture_path = os.path.join(fixture_dir, fixture_file)
        if os.path.exists(fixture_path):
            print(f"Loading {{fixture_file}}...")
            call_command('loaddata', fixture_path, verbosity=1)
        else:
            print(f"Skipping {{fixture_file}} (not found)")

def reverse_data(apps, schema_editor):
    """Reverse migration - delete imported data"""
    # This is optional - be careful with this!
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('{app_name}', '{migration_number}_auto_{timestamp}'),  # Update with your last migration
    ]

    operations = [
        migrations.RunPython(load_fixture_data, reverse_data),
    ]
'''

    # Create migrations directory if needed
    migrations_dir = f'{app_name}/migrations'
    os.makedirs(migrations_dir, exist_ok=True)

    # Create fixtures directory
    fixtures_dir = os.path.join(app_name, 'fixtures')
    os.makedirs(fixtures_dir, exist_ok=True)

    # Copy JSON files to fixtures directory
    for filename, data in fixtures.items():
        fixture_path = os.path.join(fixtures_dir, filename)
        with open(fixture_path, 'w') as f:
            json.dump(data, f, indent=2)
        print(f"✓ Copied {filename} to {fixture_path}")

    # Write migration file
    migration_filename = f'{migrations_dir}/{migration_number}_load_initial_data.py'
    with open(migration_filename, 'w') as f:
        f.write(migration_content)

    print(f"\n✅ Migration created: {migration_filename}")
    print(f"✅ Fixtures copied to: {fixtures_dir}/")
    print(f"\nNext steps:")
    print(f"1. Review the migration file")
    print(f"2. Commit both migration and fixtures to git")
    print(f"3. Deploy to production")
    print(f"4. Run: python manage.py migrate")

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Usage: python create_data_migration.py <backup_directory>")
        print("Example: python create_data_migration.py data_backup_20251016_004008")
        sys.exit(1)

    backup_dir = sys.argv[1]
    if not os.path.exists(backup_dir):
        print(f"❌ Directory not found: {backup_dir}")
        sys.exit(1)

    create_data_migration(backup_dir)
