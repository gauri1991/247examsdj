# Generated by Django 5.2.4 on 2025-07-29 16:29

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('questions', '0003_add_enhanced_question_features'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExtractionTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('template_type', models.CharField(choices=[('regex', 'Regular Expression'), ('pattern', 'Pattern-based'), ('ml_model', 'Machine Learning'), ('hybrid', 'Hybrid Approach')], max_length=20)),
                ('pattern_config', models.JSONField(default=dict, help_text='Configuration for extraction patterns')),
                ('question_patterns', models.JSONField(default=list, help_text='Patterns for question detection')),
                ('answer_patterns', models.JSONField(default=list, help_text='Patterns for answer detection')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('success_rate', models.FloatField(blank=True, null=True, verbose_name='Success rate in %')),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extraction_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'extraction_templates',
                'ordering': ['-success_rate', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PDFDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='pdf_documents/')),
                ('status', models.CharField(choices=[('uploaded', 'Uploaded'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='uploaded', max_length=20)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('page_count', models.PositiveIntegerField(blank=True, null=True)),
                ('is_searchable', models.BooleanField(blank=True, help_text='True if PDF contains searchable text', null=True)),
                ('layout_type', models.CharField(choices=[('single_column', 'Single Column'), ('multi_column', 'Multi Column'), ('mixed', 'Mixed Layout'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('confidence_score', models.FloatField(blank=True, help_text='Overall confidence in extraction', null=True)),
                ('processing_time_seconds', models.FloatField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('extraction_notes', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processing_started_at', models.DateTimeField(blank=True, null=True)),
                ('processing_completed_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_pdfs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pdf_documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ProcessingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('current_step', models.CharField(blank=True, choices=[('upload_validation', 'Upload Validation'), ('text_detection', 'Text Detection'), ('ocr_processing', 'OCR Processing'), ('layout_analysis', 'Layout Analysis'), ('text_extraction', 'Text Extraction'), ('qa_detection', 'Q&A Detection'), ('answer_extraction', 'Answer Extraction'), ('confidence_scoring', 'Confidence Scoring'), ('finalization', 'Finalization')], max_length=30)),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('step_details', models.JSONField(blank=True, default=dict, help_text='Details for each processing step')),
                ('error_details', models.JSONField(blank=True, default=dict, help_text='Error details if processing fails')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('pdf_document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processing_jobs', to='pdf_extractor.pdfdocument')),
            ],
            options={
                'db_table': 'processing_jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExtractedQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('mcq', 'Multiple Choice'), ('multi_select', 'Multiple Select'), ('true_false', 'True/False'), ('fill_blank', 'Fill in the Blank'), ('essay', 'Essay/Descriptive'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('page_number', models.PositiveIntegerField()),
                ('position_on_page', models.JSONField(default=dict, help_text='Bounding box coordinates')),
                ('answer_options', models.JSONField(blank=True, default=list, help_text='List of answer options for MCQ')),
                ('correct_answers', models.JSONField(blank=True, default=list, help_text='List of correct answers')),
                ('explanation', models.TextField(blank=True)),
                ('confidence_score', models.FloatField(help_text='Confidence score 0-100')),
                ('confidence_level', models.CharField(choices=[('high', 'High (>80%)'), ('medium', 'Medium (60-80%)'), ('low', 'Low (<60%)')], max_length=10)),
                ('extraction_method', models.CharField(help_text='Method used for extraction', max_length=50)),
                ('estimated_difficulty', models.CharField(blank=True, help_text='Auto-detected difficulty', max_length=10)),
                ('estimated_topic', models.CharField(blank=True, max_length=100)),
                ('estimated_marks', models.FloatField(blank=True, null=True)),
                ('requires_review', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_converted', models.BooleanField(default=False, help_text='True if converted to Question model')),
                ('extracted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('converted_at', models.DateTimeField(blank=True, null=True)),
                ('converted_question', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_extraction', to='questions.question')),
                ('question_bank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='questions.questionbank')),
                ('pdf_document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extracted_questions', to='pdf_extractor.pdfdocument')),
                ('processing_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extracted_questions', to='pdf_extractor.processingjob')),
            ],
            options={
                'db_table': 'extracted_questions',
                'ordering': ['page_number', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProcessingStatistics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_questions_found', models.PositiveIntegerField(default=0)),
                ('questions_by_type', models.JSONField(default=dict, help_text='Count of questions by type')),
                ('questions_by_confidence', models.JSONField(default=dict, help_text='Count of questions by confidence level')),
                ('pages_processed', models.PositiveIntegerField(default=0)),
                ('text_extraction_time', models.FloatField(blank=True, null=True)),
                ('qa_detection_time', models.FloatField(blank=True, null=True)),
                ('total_processing_time', models.FloatField(blank=True, null=True)),
                ('average_confidence_score', models.FloatField(blank=True, null=True)),
                ('high_confidence_questions', models.PositiveIntegerField(default=0)),
                ('questions_requiring_review', models.PositiveIntegerField(default=0)),
                ('questions_converted', models.PositiveIntegerField(default=0)),
                ('questions_approved', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pdf_document', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='pdf_extractor.pdfdocument')),
            ],
            options={
                'db_table': 'processing_statistics',
            },
        ),
    ]
