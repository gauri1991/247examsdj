# Generated by Django 5.2.4 on 2025-08-24 06:49

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalSubject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(help_text='Short code like MATH, PHYS, ENG', max_length=20, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('science', 'Science'), ('mathematics', 'Mathematics'), ('language', 'Language'), ('social_science', 'Social Science'), ('engineering', 'Engineering'), ('medical', 'Medical'), ('commerce', 'Commerce'), ('arts', 'Arts'), ('computer_science', 'Computer Science'), ('general_knowledge', 'General Knowledge')], max_length=20)),
                ('level', models.CharField(choices=[('elementary', 'Elementary (1-5)'), ('middle', 'Middle School (6-8)'), ('high_school', 'High School (9-12)'), ('undergraduate', 'Undergraduate'), ('postgraduate', 'Postgraduate'), ('competitive', 'Competitive Exams'), ('professional', 'Professional')], max_length=20)),
                ('icon', models.CharField(blank=True, help_text='Emoji or icon class', max_length=50)),
                ('color_code', models.CharField(default='#3B82F6', help_text='Hex color code', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('popularity_score', models.IntegerField(default=0, help_text='Usage count across exams')),
                ('reference_standards', models.JSONField(blank=True, default=list, help_text='Educational standards this subject aligns with')),
                ('external_links', models.JSONField(blank=True, default=list, help_text='Reference links for subject information')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_global_subjects', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_global_subjects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'global_subjects',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GlobalTopic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('topic_type', models.CharField(choices=[('unit', 'Unit'), ('chapter', 'Chapter'), ('topic', 'Topic'), ('subtopic', 'Subtopic'), ('concept', 'Concept'), ('skill', 'Skill')], default='topic', max_length=20)),
                ('depth_level', models.IntegerField(default=0, help_text='0 for root topics')),
                ('order', models.IntegerField(default=0, help_text='Order within same level')),
                ('path', models.CharField(blank=True, help_text='Hierarchical path like /math/algebra/linear-equations', max_length=500)),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], default='medium', max_length=10)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('estimated_hours', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('learning_objectives', models.JSONField(blank=True, default=list, help_text='List of learning objectives')),
                ('keywords', models.JSONField(blank=True, default=list, help_text='Search keywords and tags')),
                ('reference_materials', models.JSONField(blank=True, default=list, help_text='Books, links, videos, etc.')),
                ('is_active', models.BooleanField(default=True)),
                ('is_template', models.BooleanField(default=True, help_text='Can be used as template for exam syllabi')),
                ('usage_count', models.IntegerField(default=0, help_text='Number of times used in syllabi')),
                ('is_approved', models.BooleanField(default=False)),
                ('approval_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_global_topics', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_global_topics', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='knowledge.globaltopic')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='Topics that should be learned before this one', related_name='dependent_topics', to='knowledge.globaltopic')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='global_topics', to='knowledge.globalsubject')),
            ],
            options={
                'db_table': 'global_topics',
                'ordering': ['subject', 'depth_level', 'order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='SubjectExpertise',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('expertise_level', models.IntegerField(choices=[(1, 'Beginner'), (2, 'Basic'), (3, 'Intermediate'), (4, 'Advanced'), (5, 'Expert')])),
                ('credentials', models.TextField(blank=True, help_text='Qualifications, experience, etc.')),
                ('verified', models.BooleanField(default=False)),
                ('topics_created', models.IntegerField(default=0)),
                ('topics_approved', models.IntegerField(default=0)),
                ('content_contributions', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knowledge.globalsubject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'subject_expertise',
            },
        ),
        migrations.CreateModel(
            name='TopicTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('template_type', models.CharField(choices=[('standard', 'Standard Curriculum'), ('competitive', 'Competitive Exam'), ('custom', 'Custom Template')], max_length=20)),
                ('structure', models.JSONField(default=dict, help_text='JSON structure defining the complete topic hierarchy')),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=False)),
                ('usage_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('root_topics', models.ManyToManyField(blank=True, related_name='templates', to='knowledge.globaltopic')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='knowledge.globalsubject')),
            ],
            options={
                'db_table': 'topic_templates',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TopicUsageLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('exam_id', models.UUIDField()),
                ('customizations', models.JSONField(blank=True, default=dict, help_text='Custom modifications made to the topic')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('global_topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='knowledge.globaltopic')),
                ('used_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'topic_usage_logs',
            },
        ),
        migrations.AddIndex(
            model_name='globalsubject',
            index=models.Index(fields=['category', 'level'], name='global_subj_categor_b93fd1_idx'),
        ),
        migrations.AddIndex(
            model_name='globalsubject',
            index=models.Index(fields=['is_active', 'is_featured'], name='global_subj_is_acti_0e5295_idx'),
        ),
        migrations.AddIndex(
            model_name='globalsubject',
            index=models.Index(fields=['popularity_score'], name='global_subj_popular_e1bf25_idx'),
        ),
        migrations.AddIndex(
            model_name='globaltopic',
            index=models.Index(fields=['subject', 'parent', 'order'], name='global_topi_subject_f12974_idx'),
        ),
        migrations.AddIndex(
            model_name='globaltopic',
            index=models.Index(fields=['subject', 'depth_level'], name='global_topi_subject_ceb17d_idx'),
        ),
        migrations.AddIndex(
            model_name='globaltopic',
            index=models.Index(fields=['is_active', 'is_template', 'is_approved'], name='global_topi_is_acti_92d725_idx'),
        ),
        migrations.AddIndex(
            model_name='globaltopic',
            index=models.Index(fields=['difficulty', 'priority'], name='global_topi_difficu_a4f5f8_idx'),
        ),
        migrations.AddIndex(
            model_name='globaltopic',
            index=models.Index(fields=['usage_count'], name='global_topi_usage_c_e80377_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='globaltopic',
            unique_together={('subject', 'parent', 'title')},
        ),
        migrations.AlterUniqueTogether(
            name='subjectexpertise',
            unique_together={('user', 'subject')},
        ),
        migrations.AddIndex(
            model_name='topicusagelog',
            index=models.Index(fields=['global_topic', 'exam_id'], name='topic_usage_global__af9df7_idx'),
        ),
        migrations.AddIndex(
            model_name='topicusagelog',
            index=models.Index(fields=['created_at'], name='topic_usage_created_c1ccb5_idx'),
        ),
    ]
